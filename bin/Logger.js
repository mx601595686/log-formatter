"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const moment = require("moment");
const isNode = require('is-node');
const chalk = isNode ? require.call(undefined, 'chalk') : undefined; //浏览器不进行样式格式化，同时防止webpack打包时引入chalk
/**
 * 消息模板的构造类
 *
 * @export
 * @class Logger
 */
class Logger extends Function {
    constructor() {
        super();
        /**
         * 日志类型
         */
        this._type = 0 /* log */;
        /**
         * 样式层数组
         */
        this._formatArray = [];
        /**
         * 当前连缀属性所处的位置
         */
        this.sequenceIndex = 0;
        // 第一层默认是当前时间
        this._formatArray.push({
            tags: ["time"],
            get text() {
                const tags = new Set(this.tags);
                if (!tags.has('noDate') && !tags.has('noTime')) {
                    const text = `[${moment().format('YYYY-MM-DD HH:mm:ss')}]`;
                    return isNode ? chalk.gray(text) : text;
                }
                else if (tags.has('noDate')) {
                    const text = `[${moment().format('HH:mm:ss')}]`;
                    return isNode ? chalk.gray(text) : text;
                }
                else if (tags.has('noTime')) {
                    const text = `[${moment().format('YYYY-MM-DD')}]`;
                    return isNode ? chalk.gray(text) : text;
                }
                else {
                    this.skip = true; //如果时间和日期都不显示就跳过
                    return '';
                }
            },
            template: []
        }, { template: [], tags: ['first'] });
    }
    /**
     * 返回当前层
     */
    get _currentLayer() {
        return this._formatArray[this._formatArray.length - 1];
    }
    /**
     * 创建新的样式层。
     *
     * @private
     * @returns {FormatLayer} 返回新创建的层
     * @memberof Logger
     */
    _newLayer() {
        const layer = { template: [] };
        this._formatArray.push(layer);
        return layer;
    }
    /**
     * 为当前层添加新的样式
     *
     * @private
     * @param {keyof _chalk.ChalkStyleMap} style chalk 样式的名称
     * @memberof Logger
     */
    _addStyle(style) {
        const layer = this._currentLayer;
        if (isNode) {
            layer.style = layer.style === undefined ? chalk[style] : layer.style[style];
        }
    }
    /**
     * 为当前层添加新的样式模板
     *
     * @private
     * @param {(arg: string) => string} template 样式模板
     * @memberof Logger
     */
    _addTemplate(template) {
        const layer = this._currentLayer;
        layer.template.push(template);
    }
    _trigger(property) {
        switch (property) {
            case 'format':
                return this.format.bind(this);
            case 'line':
                return (char = '-', length = 100) => console.log('\r\n', char.repeat(length), '\r\n');
            case 'lineWithText'://双线夹文字
                return (text, char = '-', length = 100) => {
                    let whiteSpace = 0;
                    if (text.length < length) {
                        whiteSpace = (length - text.length) / 2;
                    }
                    console.log('\r\n', char.repeat(length), '\r\n', ' '.repeat(whiteSpace), text, '\r\n', char.repeat(length), '\r\n');
                };
            case 'warn':
                this._type = 1 /* warning */;
                if (this.sequenceIndex === 1) {
                    this.sequenceIndex = 0;
                    this._trigger('yellow');
                }
                else {
                    this._trigger('text');
                    this._trigger('yellow');
                }
                break;
            case 'error':
                this._type = 2 /* error */;
                if (this.sequenceIndex === 1) {
                    this.sequenceIndex = 0;
                    this._trigger('red');
                }
                else {
                    this._trigger('text');
                    this._trigger('red');
                }
                break;
            case 'noTime':
                if (this.sequenceIndex === 1)
                    this.sequenceIndex = 0;
                this._formatArray[0].tags.push('noTime');
                break;
            case 'noDate':
                if (this.sequenceIndex === 1)
                    this.sequenceIndex = 0;
                this._formatArray[0].tags.push('noDate');
                break;
            case 'text':
            case 'title':
                if (this.sequenceIndex !== 1)
                    this._newLayer();
                break;
            case 'linefeed':
                this._trigger('text');
                this._currentLayer.text = '\r\n';
                break;
            case 'content':
                this._trigger('linefeed');
                this._trigger('text');
                break;
            case 'square':
                this._addTemplate((arg) => `[${arg}]`);
                break;
            case 'location':
                this._trigger('text');
                this._trigger('square');
                break;
            case 'round':
                this._addTemplate((arg) => `(${arg})`);
                break;
            case 'mustache':
                this._addTemplate((arg) => `{${arg}}`);
                break;
            default://chalk 样式
                this._addStyle(property);
                break;
        }
    }
    format(...text) {
        const result = [];
        for (let i = 0, j = 0; i < text.length; j++) {
            let txt;
            let style;
            let template;
            if (j < this._formatArray.length) {
                if (this._formatArray[j].skip === true)
                    continue;
                txt = this._formatArray[j].text !== undefined ? this._formatArray[j].text : text[i++];
                style = this._formatArray[j].style;
                template = this._formatArray[j].template;
            }
            else {
                txt = text[i++];
                style = this._formatArray[this._formatArray.length - 1].style;
                template = this._formatArray[this._formatArray.length - 1].template;
            }
            switch (Object.prototype.toString.call(txt)) {
                case '[object Error]':
                    txt = txt.message + ' -> ' + txt.stack;
                    break;
                default:
                    if (typeof txt === 'object')
                        txt = JSON.stringify(txt);
                    break;
            }
            if (style !== undefined) {
                txt = style(txt);
            }
            if (template !== undefined) {
                txt = template.reduce((pre, tmp) => tmp(pre), txt);
            }
            result.push(txt);
        }
        return result;
    }
    /**
     * 将格式化后的内容打印到控制台
     *
     * @param {...any[]} text 要被格式化的内容
     * @memberof Logger
     */
    log(...text) {
        switch (this._type) {
            case 0 /* log */:
                console.log(...this.format(...text));
                break;
            case 1 /* warning */:
                console.warn(...this.format(...text));
                break;
            case 2 /* error */:
                console.error(...this.format(...text));
                break;
            default:
                throw new Error('没有对应的日志输出类型：' + this._type);
        }
    }
    /**
     * 包装当前对象
     *
     * @returns {LoggerPublicProperties}
     * @memberof Logger
     */
    toProxy() {
        return new Proxy(this, {
            apply(target, thisArg, argumentsList) {
                target.log(...argumentsList);
            },
            get(target, property, receiver) {
                target.sequenceIndex++;
                const result = target._trigger(property);
                return result === undefined ? receiver : result;
            }
        });
    }
}
exports.Logger = Logger;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
