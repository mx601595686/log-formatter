"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const is_in_browser_1 = require("is-in-browser");
const chalk = is_in_browser_1.default ? undefined : require.call(undefined, 'chalk'); //浏览器不进行样式格式化，同时防止webpack打包时引入chalk
/**
 * 消息模板的构造类
 *
 * @export
 * @class Logger
 */
class Logger extends Function {
    constructor() {
        super();
        /**
         * 日志类型
         */
        this._type = 0 /* log */;
        /**
         * 样式层数组
         */
        this._formatArray = [];
        // 第一层默认是当前时间
        this._formatArray.push({
            tag: "time",
            get text() {
                return is_in_browser_1.default ? `[${(new Date).toLocaleTimeString()}]` : chalk.gray(`[${(new Date).toLocaleTimeString()}]`);
            },
            template: []
        }, { template: [], tag: 'first' });
    }
    /**
     * 返回当前层
     */
    get _currentLayer() {
        return this._formatArray[this._formatArray.length - 1];
    }
    /**
     * 创建新的样式层。
     *
     * @private
     * @returns {FormatLayer} 返回新创建的层
     * @memberof Logger
     */
    _newLayer() {
        let layer = this._formatArray[1];
        if (layer.tag === 'first') {
            layer.tag = undefined;
        }
        else {
            layer = { template: [] };
            this._formatArray.push(layer);
        }
        return layer;
    }
    /**
     * 为当前层添加新的样式
     *
     * @private
     * @param {keyof _chalk.ChalkStyleMap} style chalk 样式的名称
     * @memberof Logger
     */
    _addStyle(style) {
        const layer = this._currentLayer;
        if (!is_in_browser_1.default) {
            layer.style = layer.style === undefined ? chalk[style] : layer.style[style];
        }
    }
    /**
     * 为当前层添加新的样式模板
     *
     * @private
     * @param {(arg: string) => string} template 样式模板
     * @memberof Logger
     */
    _addTemplate(template) {
        const layer = this._currentLayer;
        layer.template.push(template);
    }
    format(...text) {
        const result = [];
        for (let i = 0, j = 0; i < text.length; j++) {
            let txt;
            let style;
            let template;
            if (j < this._formatArray.length) {
                if (this._formatArray[j].skip === true)
                    continue;
                txt = this._formatArray[j].text !== undefined ? this._formatArray[j].text : text[i++];
                style = this._formatArray[j].style;
                template = this._formatArray[j].template;
            }
            else {
                txt = text[i++];
                style = this._formatArray[this._formatArray.length - 1].style;
                template = this._formatArray[this._formatArray.length - 1].template;
            }
            switch (Object.prototype.toString.call(txt)) {
                case '[object Error]':
                    txt = txt.message + ' -> ' + txt.stack;
                    break;
                default:
                    if (typeof txt === 'object')
                        txt = JSON.stringify(txt);
                    break;
            }
            if (style !== undefined) {
                txt = style(txt);
            }
            if (template !== undefined) {
                txt = template.reduce((pre, tmp) => tmp(pre), txt);
            }
            result.push(txt);
        }
        return result;
    }
    /**
     * 将格式化后的内容打印到控制台
     *
     * @param {...any[]} text 要被格式化的内容
     * @memberof Logger
     */
    log(...text) {
        switch (this._type) {
            case 0 /* log */:
                console.log(...this.format(...text));
                break;
            case 1 /* warning */:
                console.warn(...this.format(...text));
                break;
            case 2 /* error */:
                console.error(...this.format(...text));
                break;
            default:
                throw new Error('没有对应的日志输出类型：' + this._type);
        }
    }
    /**
     * 包装当前对象
     *
     * @returns {LoggerPublicProperties}
     * @memberof Logger
     */
    toProxy() {
        return new Proxy(this, {
            apply(target, thisArg, argumentsList) {
                target.log(...argumentsList);
            },
            get(target, property, receiver) {
                switch (property) {
                    case 'format':
                        return target.format.bind(target);
                    case 'line':
                        return (char = '-', length = 100) => console.log('\r\n', char.repeat(length), '\r\n');
                    case 'lineWithText'://双线夹文字
                        return (text, char = '-', length = 100) => {
                            let whiteSpace = 0;
                            if (text.length < length) {
                                whiteSpace = (length - text.length) / 2;
                            }
                            console.log('\r\n', char.repeat(length), '\r\n', ' '.repeat(whiteSpace), text, '\r\n', char.repeat(length), '\r\n');
                        };
                    case 'warn':
                        target._type = 1 /* warning */;
                        return receiver.yellow;
                    case 'error':
                        target._type = 2 /* error */;
                        return receiver.red;
                    case 'noTime':
                        target._formatArray[0].skip = true;
                        return receiver;
                    case 'text':
                    case 'title':
                        target._newLayer();
                        return receiver;
                    case 'linefeed':
                        target._newLayer().text = '\r\n';
                        return receiver;
                    case 'content':
                        return receiver.linefeed.text;
                    case 'square':
                        target._addTemplate((arg) => `[${arg}]`);
                        return receiver;
                    case 'location':
                        return receiver.text.square;
                    case 'round':
                        target._addTemplate((arg) => `(${arg})`);
                        return receiver;
                    case 'mustache':
                        target._addTemplate((arg) => `{${arg}}`);
                        return receiver;
                    default://chalk 样式
                        target._addStyle(property);
                        return receiver;
                }
            }
        });
    }
}
exports.Logger = Logger;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
